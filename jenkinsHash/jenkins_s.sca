####################################
## Jenkins Hash
##########################################################################
## Input:   const uint8_t* key, size_t length
## Output:  uint32_t hash
##########################################################################

.pragma k=5 r=17 beta=32
# .pragma PQ=239.251                
# use array.sca

# .pragma PQ=63199.64567            
# use array2.sca

.pragma PQ=4281167959.4271299633
# use array3.sca
.pragma io=ts incdir=../lib/

.mov21 header_ptr length

jenkins_loop:
    .mov21 ptr temp             # temp = key[i];
    .inc ptr                    # i++;
    .inc i
    .add temp hash              # hash += temp;
    ################ Shift Left 10 bits Start #################
    .mov _o10 tmp
    .mov _o0 j
    .mov hash temp              # temp = hash
    _o0 tmp end_sl_10_loop;
    sl_10_loop_exp:             # for (j = 0; j < i; j++)
        .add temp temp     #   sl_hash *= 2;
        .inc j
    .ifneq j _o10 sl_10_loop_exp
    end_sl_10_loop:
    ################ Shift Left 10 bits END #################
    .add temp hash              # hash += temp;

    ################# Shift Right 6 bits Start #################
    .mov _o6 tmp
    .mov _o0 j
    .mov hash temp              # temp = hash
    _o0 tmp end_sr_6_loop;
    sr_6_loop_exp:              # for (j = 0; j < i; j++)
        ._sd2 temp temp         #   temp /= 2;
        .inc j
    .ifneq j _o6 sr_6_loop_exp
    end_sr_6_loop:
    ################# Shift Right 6 bits END #################
    .mov hash x
    .mov temp y
    .outd x
    .outd y
    ######################### hash XOR temp, XOR START #########################
    .mov _o0 i
    .mov _s0 x_xor_y

    for_all_bits:
        ## Compute LSB(x)
        ._sd2 x x_half  # x_half = x / 2
        .mov x lsb_x    # lsb_x = x - (x_half + x_half)
        x_half lsb_x;
        x_half lsb_x;

        ## Compute LSB(y)
        ._sd2 y y_half  # y_half = y / 2
        .mov y lsb_y    # lsb_y = y - (y_half + y_half)
        y_half lsb_y;
        y_half lsb_y;

        ## Compute LSB(x) XOR LSB(y)
        .mov lsb_x lsbx_or_lsby     # lsbx_or_lsby = lsb_x + lsb_y
        .add lsb_y lsbx_or_lsby
        .smul lsb_x lsb_y lsbx_and_lsby # lsbx_and_lsby = lsb_x * lsb_y
        .mov _s1 lsbx_and_lsby_inv
        lsbx_and_lsby lsbx_and_lsby_inv;        # lsbx_and_lsby_inv = (1 - (lsb_x * lsb_y)
        .smul lsbx_or_lsby lsbx_and_lsby_inv lsb    # lsb = (lsb_x + lsb_y) * (1 - (lsb_x * lsb_y));

        .mov i tmp
        .mov _o0 j
        .mov lsb exp_result             # exp_result = lsb
        _o0 tmp end_exp_loop;
        exp_loop:                       # for (j = 0; j < i; j++)
            .add exp_result exp_result #     exp_result *= 2;
            .add _o1 j
        .ifneq j i exp_loop
        end_exp_loop:

        .add exp_result x_xor_y

        ## Continue with next bits
        ._sd2 x x
        ._sd2 y y 
        
        .add _o1 i      # i++
    .ifneq i word_size for_all_bits
    ######################### XOR END #########################
    .mov x_xor_y hash
    .outd hash
.ifneq i length jenkins_loop

################ Shift Left 3 bits Start #################
.mov _o3 tmp
.mov _o0 j
.mov hash temp              # temp = hash
_o0 tmp end_sl_3_loop;
sl_3_loop_exp:             # for (j = 0; j < i; j++)
    .add temp temp     #   sl_hash *= 2;
    .inc j
.ifneq j _o3 sl_3_loop_exp
end_sl_3_loop:
################ Shift Left 3 bits END #################
.add temp hash              # hash += temp;

################# Shift Right 11 bits Start #################
.mov _o11 tmp
.mov _o0 j
.mov hash temp              # temp = hash
_o0 tmp end_sr_11_loop;
sr_11_loop_exp:              # for (j = 0; j < i; j++)
    ._sd2 temp temp         #   temp /= 2;
    .inc j
.ifneq j _o11 sr_11_loop_exp
end_sr_11_loop:
################# Shift Right 11 bits END #################
.mov hash x
.mov temp y
.outd x
.outd y

######################### hash XOR temp, XOR START #########################
.mov _o0 i
.mov _s0 x_xor_y

for_all_bits2:
    ## Compute LSB(x)
    ._sd2 x x_half  # x_half = x / 2
    .mov x lsb_x    # lsb_x = x - (x_half + x_half)
    x_half lsb_x;
    x_half lsb_x;

    ## Compute LSB(y)
    ._sd2 y y_half  # y_half = y / 2
    .mov y lsb_y    # lsb_y = y - (y_half + y_half)
    y_half lsb_y;
    y_half lsb_y;

    ## Compute LSB(x) XOR LSB(y)
    .mov lsb_x lsbx_or_lsby     # lsbx_or_lsby = lsb_x + lsb_y
    .add lsb_y lsbx_or_lsby
    .smul lsb_x lsb_y lsbx_and_lsby # lsbx_and_lsby = lsb_x * lsb_y
    .mov _s1 lsbx_and_lsby_inv
    lsbx_and_lsby lsbx_and_lsby_inv;        # lsbx_and_lsby_inv = (1 - (lsb_x * lsb_y)
    .smul lsbx_or_lsby lsbx_and_lsby_inv lsb    # lsb = (lsb_x + lsb_y) * (1 - (lsb_x * lsb_y));

    .mov i tmp
    .mov _o0 j
    .mov lsb exp_result             # exp_result = lsb
    _o0 tmp end_exp_loop2;
    exp_loop2:                       # for (j = 0; j < i; j++)
        .add exp_result exp_result #     exp_result *= 2;
        .add _o1 j
    .ifneq j i exp_loop2
    end_exp_loop2:

    .add exp_result x_xor_y

    ## Continue with next bits
    ._sd2 x x
    ._sd2 y y 
    
    .add _o1 i      # i++
.ifneq i word_size for_all_bits2
######################### XOR END #########################
.mov x_xor_y hash
.outd hash

################ Shift Left 15 bits Start #################
.mov _o15 tmp
.mov _o0 j
.mov hash temp              # temp = hash
_o0 tmp end_sl_15_loop;
sl_15_loop_exp:             # for (j = 0; j < i; j++)
    .add temp temp     #   sl_hash *= 2;
    .inc j
.ifneq j _o15 sl_15_loop_exp
end_sl_15_loop:
################ Shift Left 15 bits END #################
.add temp hash              # hash += temp;

.outd hash

.halt


## Variables
. x:~0 y:~0
. hash:~0 temp:~0
. word_size:32
. i:0 j:0
. sl_hash:0

## variables used by XOR
. x_half:0 y_half:0 lsb_x:0 lsb_y:0 lsb:0 x_xor_y:~0
. lsbx_and_lsby:0 lsbx_or_lsby:0 lsbx_and_lsby_inv:0
. tmp:0 length:0 exp:0 exp_result:1

## Constants
. _o0:0 _o3:3 _o6:6 _o10:10 _o11:11 _o15:15
. _s2:~2


. ptr:db_start
. header_ptr:header_start


# data
header_start:
.include "header.opn"
header_end:
header_size: (header_end - header_start)

db_start:
.include datax "array3.sec"
db_end:
db_size: (db_end - db_start)

.include "secure.lib"

