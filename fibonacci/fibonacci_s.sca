####################################
## Fibonacci numbers
## 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1587 ...
##########################################################################
## Compute the Fibonacci of the input number (num).
##########################################################################
## Iterate up to a maximum number (to avoid side channel attacks)
## and keep the result of the requested number.
##########################################################################

.pragma k=5 r=17 beta=8
.pragma PQ=239.251
.pragma io=ts incdir=../lib/

.mov _o0 iter                       # iter = 0
.mov _s0 i                          # i = ~0
fib_loop:
    .add _o1 iter                   # iter++
    .add _s1 i                      # i++

    .seq i input x                  # x = i == input 
    .smul x fi y                    # y = x * fi
    .add y result                   # result += y

    .mov f1 fi             
    .add f2 fi                      # fi = fi + f2
    .mov f2 f1                      # f1 = f2
    .mov fi f2                      # f2 = fi
.ifneq iter maxnum fib_loop
.out result
.outd result
.halt

. maxnum:50 # the maximum factorial the program can compute
. _o0:0
# variables
. iter:0
. i:~0 f1:~0 f2:~1 fi:~1 
. x:~0 y:~0 result:~0

# the Fibonacci number to compute
input:;.include datax "input.sec"

.include "secure.lib"

# fibonnaci(n):
# f1 = 0; f2 =1;
# for (i = 0; i < n; i ++):
#   fi = f1 + f2; f1 = f2; f2 = fi;
# print fi
