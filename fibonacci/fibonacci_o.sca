####################################
## Fibonacci numbers
## 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1587 ...
##########################################################################
## Compute the Fibonacci of the input number (num).
##########################################################################
## Iterate up to a maximum number (to avoid side channel attacks)
## and keep the result of the requested number.
##########################################################################

.pragma k=5 r=17 beta=8
.pragma PQ=239.251
.pragma io=ts incdir=../lib/

.mov _o0 i                          # i = 0
fib_loop:
    .inc i                          # i++
    .mov _o0 x                      # x = 0
    .ifneq i num skip               # if i == num
        .mov _o1 x                  #   x = 1
    skip:
    .omul x fi y                    # y = x * fi
    .add y result                   # result += y

    .mov f1 fi             
    .add f2 fi                      # fi = fi + f2
    .mov f2 f1                      # f1 = f2
    .mov fi f2                      # f2 = fi
.ifneq i maxnum fib_loop
.out result
.halt

. num:12  # the Fibonacci number to compute
. maxnum:50 # the maximum factorial the program can compute
. _o0:0
# variables
. i:0 f1:0 f2:1 fi:1 
. x:0 y:0 result:0

.include "secure.lib"

# fibonnaci(n):
# f1 = 0; f2 =1;
# for (i = 0; i < n; i ++):
#   fi = f1 + f2; f1 = f2; f2 = fi;
# print fi