####################################
## Array_i Deduplication: Keep unique occurrences of each object
##########################################################################
## For every element in the array_i, check every element after it. 
## Replace all duplicates with epsilon
##########################################################################


.pragma k=5 r=17 beta=8
.pragma PQ=239.251
.pragma io=ts incdir=../lib/


.mov21 header_ptr size

.mov _o0 i
outer_loop:                 # for (int i = 0; i < size ; i++) {
    .mov _o1 j
    .add i j                # j = i + 1
    .mov array_i array_j
    .inc array_j
    inner_loop:             #   for (int j = i+1 ; j < size ; j++) {
        .mov21 array_i x
        .mov21 array_j y

        # if (array[i] == array[j]) { array[j] = epsilon; }
        .ifneq x y endif
            .mov12 epsilon array_j
        endif:

        .inc j
        .inc array_j
        .mov j tmp
        .add _o1 tmp
    size tmp inner_loop     # } if (j - size <= 0) goto inner_loop

    .inc i
    .inc array_i
.ifneq i size outer_loop    # }

# Print the results
.mov ptr array_i
.mov _o0 i
loop:
    .mov21 array_i x
    .out x
    .inc array_i
    .inc i
.ifneq i size loop

.halt

# variables
. header_ptr:header_start
. ptr:db_start

. array_i:db_start array_j:db_start
. i:0 j:0
. size:0 x:0 y:0 
. tmp:0 tmp2:0 eq:0 neq:0

. _o0:0
. epsilon:999

# data
header_start:
.include "header.opn"
header_end:
header_size: (header_end - header_start)

db_start:
.include "db.opn"
db_end:
db_size: (db_end - db_start)

.include "secure.lib"
