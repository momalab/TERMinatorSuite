####################################
## AND Bitwise Operator
##########################################################################
## AND (X, Y, Length)
##########################################################################

.pragma k=5 r=17 beta=8
.pragma PQ=239.251
.pragma io=ts incdir=../lib/

.mov _o0 i
.mov _s0 x_and_y

for_all_bits:
    ## Compute LSB(x)
    ._sd2 x x_half  # x_half = x / 2
    .mov x lsb_x    # lsb_x = x - (x_half + x_half)
    x_half lsb_x;
    x_half lsb_x;

    ## Compute LSB(y)
    ._sd2 y y_half  # y_half = y / 2
    .mov y lsb_y    # lsb_y = y - (y_half + y_half)
    y_half lsb_y;
    y_half lsb_y;

    ## Compute LSB(x) AND LSB(y)
    .smul lsb_x lsb_y lsb

    .mov i tmp
    .mov _o0 j
    .mov lsb exp_result             # exp_result = lsb
    _o0 tmp end_exp_loop;
    exp_loop:                       # for (j = 0; j < i; j++)
        .add exp_result exp_result
        .add _o1 j
    .ifneq j i exp_loop
    end_exp_loop:

    .add exp_result x_and_y

    ## Continue with next bits
    .mov x_half x
    .mov y_half y
    .add _o1 i      # i++
.ifneq i length for_all_bits
.outd x_and_y

.halt


## and inputs, output
. x:~8
. y:~12
. length:4
. x_and_y:~0

## and local variables
. i:0 j:0
. x_half:0 y_half:0 lsb_x:0 lsb_y:0 lsb:0
. tmp:0
. exp:0 exp_result:1

## Constants
. _o0:0
. _s2:~2


.include "secure.lib"

